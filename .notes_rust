Macros : a way to define reusuable code patterns and abstractions that operate on the code before it is compiled. They allow for metaprogramming, enabling you to generate code dynamically based on specific patterns or rules.
Macros vs Functions
1. Expansion at Compile-time: Macros are expanded at compile-time, whereas functions are evaluated at runtime. Macros manipulate the source code before it is compiled, enabling code generation and transformation. Functions, on the other hand, execute during runtime when they are called.
2. Code Generation: Macros can generate arbitrary code. They allow for code generation based on patterns or rules, which is not possible with functions alone.
3. Hygiene: Macros have built-in hygiene rules that prevent unintended variable name clasghes and ensure generated code does not interfere with existing code. 
4. Syntax Extensions: Macros can introduce new syntax into the language. They can define domain-specific languages (DSLs) or simplify complex syntax pattern.
etc.

--------------------------------------------------------------------

&str vs String
&str and String are two types used to represent strings, but they have different ownerships and borrowing semantics.
&str (String Slice): '&str' is an immutable reference to a string slice, which is a sequence of UTF-8 encoded bytes. It is a borrowed type and does not own the underlying memory. String slices are used to reference string data without taking ownership and are commonly used as function parameters or return types to avoid unnecessary copying.
String: 'String' is a growable, mutalbe and owned string type. It represents an allocated string on the heap and has ownership of the underlying memory. 'String' allows you to modify and manipulate the string content dynamically.

--------------------------------------------------------------------

Some and Option
Some and Option are part of the Rust standard library and are used for handling nullable or optional values. They provide a way to represent the presence or absence of a value in a type-safe manner.

Option: Option is an enum type with two variants: 'Some(T)' and 'None'. It is commonly used to indicate whether a value is present ('Some') or absent ('None').
Some: Some(T) is a variant of the Option enum that represents the presence of a value. It wraps the vlaue of type 'T' and indicates that the value is not null or absent.
None: None is the other varaint of the Option enum that represents the absence of a value. It indicates that there is no value to associate with an operation or result. 'None' is often used to handle cases where a value maybe missing or when a computation fails to produce a valid result.

Option is used to avoid null pointer exceptions or undefined behavior that can occur when dealing with null values directly.